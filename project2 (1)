{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"kQ4q6UYXtQm5"},"outputs":[],"source":["# 1. Import libraries\n","#. Air Quality Index Estimation\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/","height":37},"id":"Q_I23uaStTzx","outputId":"2a337b92-88c1-42eb-de95-1d074cf5a917"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-0a4b62d3-b03a-4190-aced-0beb2ec8b832\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-0a4b62d3-b03a-4190-aced-0beb2ec8b832\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}}],"source":["from google.colab import files\n","uploaded = files.upload()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":52,"status":"ok","timestamp":1745514064704,"user":{"displayName":"Prabdeep Kaur","userId":"14465527718567962195"},"user_tz":-330},"id":"LiYlovpyvX1J","outputId":"84c75dc4-abfa-4afa-d09b-e08caca9430d"},"outputs":[{"name":"stdout","output_type":"stream","text":["                       Date,Country,Status,AQI Value\n","0                         2022-07-21,Albania,Good,14\n","1                     2022-07-21,Algeria,Moderate,65\n","2                     2022-07-21,Andorra,Moderate,55\n","3  2022-07-21,Angola,Unhealthy for Sensitive Grou...\n","4                   2022-07-21,Argentina,Moderate,63\n"]}],"source":["df = pd.read_csv('data_date.csv', sep=';', decimal=',')\n","print(df.head())"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":31,"status":"ok","timestamp":1745514077548,"user":{"displayName":"Prabdeep Kaur","userId":"14465527718567962195"},"user_tz":-330},"id":"m9WdpiwLvXxs","outputId":"5b20c8e4-967e-4ae0-e361-bc5786fb592a"},"outputs":[{"name":"stdout","output_type":"stream","text":["✅ Column names in the dataset:\n","['Date,Country,Status,AQI Value']\n"]}],"source":["print(\"✅ Column names in the dataset:\")\n","print(df.columns.tolist())"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":25,"status":"ok","timestamp":1745514088442,"user":{"displayName":"Prabdeep Kaur","userId":"14465527718567962195"},"user_tz":-330},"id":"Fi2_mO9XvXu-","outputId":"6307c4d6-c3d0-4ac6-c497-146bdf22f5a0"},"outputs":[{"name":"stdout","output_type":"stream","text":["✅ Removed unnecessary unnamed columns. Remaining columns:\n","['Date,Country,Status,AQI Value']\n"]}],"source":["df = df.loc[:, ~df.columns.str.contains('^Unnamed')]\n","print(\"✅ Removed unnecessary unnamed columns. Remaining columns:\")\n","print(df.columns.tolist())"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":68,"status":"ok","timestamp":1745514103486,"user":{"displayName":"Prabdeep Kaur","userId":"14465527718567962195"},"user_tz":-330},"id":"bDNFsTamvXsS","outputId":"42337a6f-6125-4be4-ebaf-4b53d45230aa"},"outputs":[{"name":"stdout","output_type":"stream","text":["✅ All occurrences of -200 replaced with NaN.\n","Sample showing affected rows (if any):\n","Empty DataFrame\n","Columns: [Date,Country,Status,AQI Value]\n","Index: []\n"]}],"source":["df.replace(-200, np.nan, inplace=True)\n","print(\"✅ All occurrences of -200 replaced with NaN.\")\n","print(\"Sample showing affected rows (if any):\")\n","print(df[df.isna().any(axis=1)].head(10))"]},{"cell_type":"markdown","metadata":{"id":"ZxuIiI3Ev29e"},"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1745514111327,"user":{"displayName":"Prabdeep Kaur","userId":"14465527718567962195"},"user_tz":-330},"id":"bgTM6lM9vXpZ","outputId":"c5c10990-36c9-4e0a-84ff-4c405e685a59"},"outputs":[{"name":"stdout","output_type":"stream","text":["✅ Dropped columns with >30% missing values. Columns reduced from 1 to 1\n","Remaining columns:\n","['Date,Country,Status,AQI Value']\n"]}],"source":["threshold = len(df) * 0.7\n","initial_columns = df.shape[1]\n","df = df.dropna(axis=1, thresh=threshold)\n","print(f\"✅ Dropped columns with >30% missing values. Columns reduced from {initial_columns} to {df.shape[1]}\")\n","print(\"Remaining columns:\")\n","print(df.columns.tolist())"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":45,"status":"ok","timestamp":1745514120444,"user":{"displayName":"Prabdeep Kaur","userId":"14465527718567962195"},"user_tz":-330},"id":"8wdtFyVNvXmh","outputId":"6bae9329-c569-4460-9c1a-aae73c339719"},"outputs":[{"name":"stdout","output_type":"stream","text":["✅ Sample rows after filling NaNs with column means:\n","                       Date,Country,Status,AQI Value\n","0                         2022-07-21,Albania,Good,14\n","1                     2022-07-21,Algeria,Moderate,65\n","2                     2022-07-21,Andorra,Moderate,55\n","3  2022-07-21,Angola,Unhealthy for Sensitive Grou...\n","4                   2022-07-21,Argentina,Moderate,63\n","5                     2022-07-21,Armenia,Moderate,76\n","6                   2022-07-21,Australia,Moderate,56\n","7                         2022-07-21,Austria,Good,45\n","8                      2022-07-21,Azerbaijan,Good,12\n","9                   2022-07-21,Bahrain,Unhealthy,165\n"]}],"source":["df.fillna(df.mean(numeric_only=True), inplace=True)\n","print(\"✅ Sample rows after filling NaNs with column means:\")\n","print(df.head(10))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":55,"status":"ok","timestamp":1745514128737,"user":{"displayName":"Prabdeep Kaur","userId":"14465527718567962195"},"user_tz":-330},"id":"iwY-uC6qvXjy","outputId":"069bbd77-2f84-4016-9f93-4b58455df7a9"},"outputs":[{"name":"stdout","output_type":"stream","text":["✅ Cleaned column names:\n","['Date,Country,Status,AQI Value']\n"]}],"source":["df.columns = df.columns.str.strip()\n","print(\"✅ Cleaned column names:\")\n","print(df.columns.tolist())"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1745514136236,"user":{"displayName":"Prabdeep Kaur","userId":"14465527718567962195"},"user_tz":-330},"id":"3R78LEfJvXg3","outputId":"48be3688-35cc-4bbe-e795-c63d8792bd3f"},"outputs":[{"name":"stdout","output_type":"stream","text":["✅ Listing all column names in the dataset:\n","'Date,Country,Status,AQI Value'\n"]}],"source":["print(\"✅ Listing all column names in the dataset:\")\n","for col in df.columns:\n","    print(f\"'{col}'\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2k9CeGJkvXdz"},"outputs":[],"source":[]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPFOGFHzZbGXNZf6xkXDmOr"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}